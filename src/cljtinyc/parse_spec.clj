(ns cljtinyc.parse-spec
  (:require [cljtinyc.llparser :as p]))

(def asgn1-grammar
  [[:Program :kw_void :identifier :lparen :rparen :Block]
   [:Block :lbrace :Optional-statements :rbrace]
   [:Optional-statements :Statement-list]
   [:Optional-statements :epsilon]
   [:Statement-list :Statement :Statement-list]
   [:Statement-list :epsilon]
   [:Statement :Variable :op_assign :Expression :semicolon]
   [:Variable :identifier]
   [:Expression :Simple-expression]
   [:Simple-expression :Term :Rep-term]
   [:Rep-term :Addop :Term :Rep-term]
   [:Rep-term :epsilon]
   [:Term :Factor :Rep-multerm]
   [:Rep-multerm :Mulop :Factor :Rep-multerm]
   [:Rep-multerm :epsilon]
   [:Factor :identifier]
   [:Factor :lparen :Expression :rparen]
   [:Factor :dec_literal]
   [:Addop :op_plus]
   [:Addop :op_minus]
   [:Mulop :op_star]
   [:Mulop :op_mod]
   [:Mulop :op_div]])

(def asgn2-grammar
  [[:Program :kw_void :identifier :lparen :rparen :Block]
   [:Block :lbrace :Declarations :Optional-statements :rbrace]
   [:Declarations :Declaration :Declarations]
   [:Declarations :epsilon]
   [:Declaration :Type :Identifier-list :semicolon]
   [:Type :kw_int]
   [:Type :kw_bool]
   [:Identifier-list :identifier :Identifier-list2]
   [:Identifier-list2 :comma :identifier :Identifier-list2]
   [:Identifier-list2 :epsilon]
   [:Optional-statements :Statement-list]
   [:Optional-statements :epsilon]
   [:Statement-list :Statement :Statement-list]
   [:Statement-list :epsilon]
   [:Statement :Variable :op_assign :Expression :semicolon]
   [:Statement :Block]
   [:Statement :kw_if :lparen :Expression :rparen :Statement :Else-clause]
   [:Statement :kw_while :lparen :Expression :rparen :Statement]
   [:Else-clause :kw_else :Statement]
   [:Else-clause :epsilon]
   [:Variable :identifier]
   [:Expression :Simple-expression :Relop-clause]
   [:Relop-clause :Relop :Simple-expression]
   [:Relop-clause :epsilon]
   [:Simple-expression :Sign :Term]
   [:Sign :op_plus]
   [:Sign :op_minus]
   [:Simple-expression :Term :Rep-term]
   [:Rep-term :Addop :Term :Rep-term]
   [:Rep-term :epsilon]
   [:Term :Factor :Rep-multerm]
   [:Rep-multerm :Mulop :Factor :Rep-multerm]
   [:Rep-multerm :epsilon]
   [:Factor :identifier]
   [:Factor :lparen :Expression :rparen]
   [:Factor :dec_literal]
   [:Addop :op_plus]
   [:Addop :op_minus]
   [:Addop :op_or]
   [:Mulop :op_and]
   [:Mulop :op_star]
   [:Mulop :op_mod]
   [:Mulop :op_div]
   [:Relop :op_lt]
   [:Relop :op_lte]
   [:Relop :op_gt]
   [:Relop :op_gte]
   [:Relop :op_eq]
   [:Relop :op_ne]])


(defn parse-a2 [tokens]
  (let [parser (p/get-parser asgn2-grammar :Program)
        parse-tree (parser tokens)]
    parse-tree))

